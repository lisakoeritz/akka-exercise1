akka {
  actor {
    provider = "cluster"
    
    serializers {
      java = "akka.serialization.JavaSerializer"
      # kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
      kryo = "com.twitter.chill.akka.ConfiguredAkkaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    
    serialization-bindings {
      "java.io.Serializable" = kryo
    }

    # Use this setting to test serialization of messages in a local scenario.
    # serialize-messages = on
    
    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    
    guardian-supervisor-strategy = "akka.actor.StoppingSupervisorStrategy"
  }
  
  remote {
    # https://doc.akka.io/docs/akka/2.5/remoting-artery.html#dedicated-subchannel-for-large-messages
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "localhost"
      canonical.port = 2551
      large-message-destinations = [
        "/user/*/largeMessageProxy",
        "/user/**/largeMessageProxy"
      ]
    }
  }
  
  cluster {
    min-nr-of-members = 1
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    
    # Sigar native library extract location during tests.
    # Note: use per-jvm-instance folder when running multiple jvm on one host. 
    metrics.native-library-extract-folder=${user.dir}/target/native
  }
  
  coordinated-shutdown {
    run-by-actor-system-terminate = on 
    terminate-actor-system = on
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Enable metrics extension in akka-cluster-metrics.
  extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]
}